{"streamlit.altair_chart": {"name": "altair_chart", "signature": "streamlit.altair_chart(altair_chart, use_container_width=False)", "description": null, "args": [{"name": "altair_chart", "type_name": "altair.vegalite.v2.api.Chart", "is_optional": false, "description": "The Altair chart object to display.", "default": null}, {"name": "use_container_width", "type_name": "bool", "is_optional": false, "description": "If True, set the chart width to the column width. This takes\nprecedence over Altair's native `width` value.", "default": null}]}, "streamlit.area_chart": {"name": "area_chart", "signature": "streamlit.area_chart(data=None, width=0, height=0, use_container_width=True)", "description": "This is just syntax-sugar around st.altair_chart. The main difference\nis this command uses the data's own column and indices to figure out\nthe chart's spec. As a result this is easier to use for many \"just plot\nthis\" scenarios, while being less customizable.\n\nIf st.area_chart does not guess the data specification\ncorrectly, try specifying your desired chart using st.altair_chart.", "args": [{"name": "data", "type_name": "pandas.DataFrame, pandas.Styler, numpy.ndarray, Iterable, or dict", "is_optional": false, "description": "Data to be plotted.", "default": null}, {"name": "width", "type_name": "int", "is_optional": false, "description": "The chart width in pixels. If 0, selects the width automatically.", "default": null}, {"name": "height", "type_name": "int", "is_optional": false, "description": "The chart width in pixels. If 0, selects the height automatically.", "default": null}, {"name": "use_container_width", "type_name": "bool", "is_optional": false, "description": "If True, set the chart width to the column width. This takes\nprecedence over the width argument.", "default": null}]}, "streamlit.audio": {"name": "audio", "signature": "streamlit.audio(data, format='audio/wav', start_time=0)", "description": null, "args": [{"name": "data", "type_name": "str, bytes, BytesIO, numpy.ndarray, or file opened with", "is_optional": false, "description": "io.open().\nRaw audio data, filename, or a URL pointing to the file to load.\nNumpy arrays and raw data formats must include all necessary file\nheaders to match specified file format.", "default": null}, {"name": "start_time", "type_name": "int", "is_optional": false, "description": "The time from which this element should start playing.", "default": null}, {"name": "format", "type_name": "str", "is_optional": false, "description": "The mime type for the audio file. Defaults to 'audio/wav'.\nSee https://tools.ietf.org/html/rfc4281 for more info.", "default": "s"}]}, "streamlit.balloons": {"name": "balloons", "signature": "streamlit.balloons()", "description": null, "args": []}, "streamlit.bar_chart": {"name": "bar_chart", "signature": "streamlit.bar_chart(data=None, width=0, height=0, use_container_width=True)", "description": "This is just syntax-sugar around st.altair_chart. The main difference\nis this command uses the data's own column and indices to figure out\nthe chart's spec. As a result this is easier to use for many \"just plot\nthis\" scenarios, while being less customizable.\n\nIf st.bar_chart does not guess the data specification\ncorrectly, try specifying your desired chart using st.altair_chart.", "args": [{"name": "data", "type_name": "pandas.DataFrame, pandas.Styler, numpy.ndarray, Iterable, or dict", "is_optional": false, "description": "Data to be plotted.", "default": null}, {"name": "width", "type_name": "int", "is_optional": false, "description": "The chart width in pixels. If 0, selects the width automatically.", "default": null}, {"name": "height", "type_name": "int", "is_optional": false, "description": "The chart width in pixels. If 0, selects the height automatically.", "default": null}, {"name": "use_container_width", "type_name": "bool", "is_optional": false, "description": "If True, set the chart width to the column width. This takes\nprecedence over the width argument.", "default": null}]}, "streamlit.beta_columns": {"name": "beta_columns", "signature": "streamlit.beta_columns(spec: Union[int, Sequence[Union[int, float]]])", "description": "Inserts a number of multi-element containers laid out side-by-side and\nreturns a list of container objects.\n\nTo add elements to the returned containers, you can use \"with\" notation\n(preferred) or just call methods directly on the returned object. See\nexamples below.\n\n.. warning::\n    Currently, you may not put columns inside another column.", "args": [{"name": "spec", "type_name": "int or list of numbers", "is_optional": false, "description": "If an int\n    Specifies the number of columns to insert, and all columns\n    have equal width.\n\nIf a list of numbers\n    Creates a column for each number, and each\n    column's width is proportional to the number provided. Numbers can\n    be ints or floats, but they must be positive.\n\n    For example, `st.beta_columns([3, 1, 2])` creates 3 columns where\n    the first column is 3 times the width of the second, and the last\n    column is 2 times that width.", "default": null}]}, "streamlit.beta_container": {"name": "beta_container", "signature": "streamlit.beta_container()", "description": "Inserts an invisible container into your app that can be used to hold\nmultiple elements. This allows you to, for example, insert multiple\nelements into your app out of order.\n\nTo add elements to the returned container, you can use \"with\" notation\n(preferred) or just call methods directly on the returned object. See\nexamples below.", "args": []}, "streamlit.beta_expander": {"name": "beta_expander", "signature": "streamlit.beta_expander(label: str, expanded: bool = False)", "description": "Inserts a container into your app that can be used to hold multiple elements\nand can be expanded or collapsed by the user. When collapsed, all that is\nvisible is the provided label.\n\nTo add elements to the returned container, you can use \"with\" notation\n(preferred) or just call methods directly on the returned object. See\nexamples below.\n\n.. warning::\n    Currently, you may not put expanders inside another expander.", "args": [{"name": "label", "type_name": "str", "is_optional": false, "description": "A string to use as the header for the expander.", "default": null}, {"name": "expanded", "type_name": "bool", "is_optional": false, "description": "If True, initializes the expander in \"expanded\" state. Defaults to\nFalse (collapsed).", "default": "s"}]}, "streamlit.bokeh_chart": {"name": "bokeh_chart", "signature": "streamlit.bokeh_chart(figure, use_container_width=False)", "description": "Bokeh is a charting library for Python. The arguments to this function\nclosely follow the ones for Bokeh's `show` function. You can find\nmore about Bokeh at https://bokeh.pydata.org.", "args": [{"name": "figure", "type_name": "bokeh.plotting.figure.Figure", "is_optional": false, "description": "A Bokeh figure to plot.", "default": null}, {"name": "use_container_width", "type_name": "bool", "is_optional": false, "description": "If True, set the chart width to the column width. This takes\nprecedence over Bokeh's native `width` value.", "default": null}, {"name": "To show Bokeh charts in Streamlit, call `st.bokeh_chart`", "type_name": null, "is_optional": null, "description": null, "default": null}, {"name": "wherever you would call Bokeh's `show`.", "type_name": null, "is_optional": null, "description": null, "default": null}]}, "streamlit.button": {"name": "button", "signature": "streamlit.button(label, key=None, help=None, on_click=None, args=None, kwargs=None) -> bool", "description": null, "args": [{"name": "label", "type_name": "str", "is_optional": false, "description": "A short label explaining to the user what this button is for.", "default": null}, {"name": "key", "type_name": "str", "is_optional": false, "description": "An optional string to use as the unique key for the widget.\nIf this is omitted, a key will be generated for the widget\nbased on its content. Multiple widgets of the same type may\nnot share the same key.", "default": null}, {"name": "help", "type_name": "str", "is_optional": false, "description": "An optional tooltip that gets displayed when the button is\nhovered over.", "default": null}, {"name": "on_click", "type_name": "callable", "is_optional": false, "description": "An optional callback invoked when this button is clicked.", "default": null}, {"name": "args", "type_name": "tuple", "is_optional": false, "description": "An optional tuple of args to pass to the callback.", "default": null}, {"name": "kwargs", "type_name": "dict", "is_optional": false, "description": "An optional dict of kwargs to pass to the callback.", "default": null}]}, "streamlit.cache": {"name": "cache", "signature": "streamlit.cache(func=None, persist=False, allow_output_mutation=False, show_spinner=True, suppress_st_warning=False, hash_funcs=None, max_entries=None, ttl=None)", "description": null, "args": [{"name": "func", "type_name": "callable", "is_optional": false, "description": "The function to cache. Streamlit hashes the function and dependent code.", "default": null}, {"name": "persist", "type_name": "boolean", "is_optional": false, "description": "Whether to persist the cache on disk.", "default": null}, {"name": "allow_output_mutation", "type_name": "boolean", "is_optional": false, "description": "Streamlit normally shows a warning when return values are mutated, as that\ncan have unintended consequences. This is done by hashing the return value internally.\n\nIf you know what you're doing and would like to override this warning, set this to True.", "default": null}, {"name": "show_spinner", "type_name": "boolean", "is_optional": false, "description": "Enable the spinner. Default is True to show a spinner when there is\na cache miss.", "default": "True"}, {"name": "suppress_st_warning", "type_name": "boolean", "is_optional": false, "description": "Suppress warnings about calling Streamlit functions from within\nthe cached function.", "default": null}, {"name": "hash_funcs", "type_name": "dict or None", "is_optional": false, "description": "Mapping of types or fully qualified names to hash functions. This is used to override\nthe behavior of the hasher inside Streamlit's caching mechanism: when the hasher\nencounters an object, it will first check to see if its type matches a key in this\ndict and, if so, will use the provided function to generate a hash for it. See below\nfor an example of how this can be used.", "default": null}, {"name": "max_entries", "type_name": "int or None", "is_optional": false, "description": "The maximum number of entries to keep in the cache, or None\nfor an unbounded cache. (When a new entry is added to a full cache,\nthe oldest cached entry will be removed.) The default is None.", "default": "None."}, {"name": "ttl", "type_name": "float or None", "is_optional": false, "description": "The maximum number of seconds to keep an entry in the cache, or\nNone if cache entries should not expire. The default is None.", "default": "None."}]}, "streamlit.caption": {"name": "caption", "signature": "streamlit.caption(body)", "description": "This should be used for captions, asides, footnotes, sidenotes, and\nother explanatory text.", "args": [{"name": "body", "type_name": "str", "is_optional": false, "description": "The text to display.", "default": null}]}, "streamlit.checkbox": {"name": "checkbox", "signature": "streamlit.checkbox(label, value=False, key=None, help=None, on_change=None, args=None, kwargs=None)", "description": null, "args": [{"name": "label", "type_name": "str", "is_optional": false, "description": "A short label explaining to the user what this checkbox is for.", "default": null}, {"name": "value", "type_name": "bool", "is_optional": false, "description": "Preselect the checkbox when it first renders. This will be\ncast to bool internally.", "default": null}, {"name": "key", "type_name": "str", "is_optional": false, "description": "An optional string to use as the unique key for the widget.\nIf this is omitted, a key will be generated for the widget\nbased on its content. Multiple widgets of the same type may\nnot share the same key.", "default": null}, {"name": "help", "type_name": "str", "is_optional": false, "description": "An optional tooltip that gets displayed next to the checkbox.", "default": null}, {"name": "on_change", "type_name": "callable", "is_optional": false, "description": "An optional callback invoked when this checkbox's value changes.", "default": null}, {"name": "args", "type_name": "tuple", "is_optional": false, "description": "An optional tuple of args to pass to the callback.", "default": null}, {"name": "kwargs", "type_name": "dict", "is_optional": false, "description": "An optional dict of kwargs to pass to the callback.", "default": null}]}, "streamlit.code": {"name": "code", "signature": "streamlit.code(body, language='python')", "description": "(This is a convenience wrapper around `st.markdown()`)", "args": [{"name": "body", "type_name": "str", "is_optional": false, "description": "The string to display as code.", "default": null}, {"name": "language", "type_name": "str", "is_optional": false, "description": "The language that the code is written in, for syntax highlighting.\nIf omitted, the code will be unstyled.", "default": null}]}, "streamlit.color_picker": {"name": "color_picker", "signature": "streamlit.color_picker(label, value=None, key=None, help=None, on_change=None, args=None, kwargs=None)", "description": null, "args": [{"name": "label", "type_name": "str", "is_optional": false, "description": "A short label explaining to the user what this input is for.", "default": null}, {"name": "value", "type_name": "str", "is_optional": false, "description": "The hex value of this widget when it first renders. If None,\ndefaults to black.", "default": "black."}, {"name": "key", "type_name": "str", "is_optional": false, "description": "An optional string to use as the unique key for the widget.\nIf this is omitted, a key will be generated for the widget\nbased on its content. Multiple widgets of the same type may\nnot share the same key.", "default": null}, {"name": "help", "type_name": "str", "is_optional": false, "description": "An optional tooltip that gets displayed next to the color picker.", "default": null}, {"name": "on_change", "type_name": "callable", "is_optional": false, "description": "An optional callback invoked when this color_picker's value\nchanges.", "default": null}, {"name": "args", "type_name": "tuple", "is_optional": false, "description": "An optional tuple of args to pass to the callback.", "default": null}, {"name": "kwargs", "type_name": "dict", "is_optional": false, "description": "An optional dict of kwargs to pass to the callback.", "default": null}]}, "streamlit.dataframe": {"name": "dataframe", "signature": "streamlit.dataframe(data=None, width=None, height=None)", "description": null, "args": [{"name": "data", "type_name": "pandas.DataFrame, pandas.Styler, numpy.ndarray, Iterable, dict,", "is_optional": false, "description": "or None\nThe data to display.\n\nIf 'data' is a pandas.Styler, it will be used to style its\nunderyling DataFrame. Streamlit supports custom cell\nvalues and colors. (It does not support some of the more exotic\npandas styling features, like bar charts, hovering, and captions.)\nStyler support is experimental!", "default": null}, {"name": "width", "type_name": "int or None", "is_optional": false, "description": "Desired width of the UI element expressed in pixels. If None, a\ndefault width based on the page width is used.", "default": "width"}, {"name": "height", "type_name": "int or None", "is_optional": false, "description": "Desired height of the UI element expressed in pixels. If None, a\ndefault height is used.", "default": "height"}]}, "streamlit.date_input": {"name": "date_input", "signature": "streamlit.date_input(label, value=None, min_value=None, max_value=None, key=None, help=None, on_change=None, args=None, kwargs=None)", "description": null, "args": [{"name": "label", "type_name": "str", "is_optional": false, "description": "A short label explaining to the user what this date input is for.", "default": null}, {"name": "value", "type_name": "datetime.date or datetime.datetime or list/tuple of datetime.date or datetime.datetime or None", "is_optional": false, "description": "The value of this widget when it first renders. If a list/tuple with\n0 to 2 date/datetime values is provided, the datepicker will allow\nusers to provide a range. Defaults to today as a single-date picker.", "default": "today"}, {"name": "min_value", "type_name": "datetime.date or datetime.datetime", "is_optional": false, "description": "The minimum selectable date. If value is a date, defaults to value - 10 years.\nIf value is the interval [start, end], defaults to start - 10 years.", "default": "value"}, {"name": "max_value", "type_name": "datetime.date or datetime.datetime", "is_optional": false, "description": "The maximum selectable date. If value is a date, defaults to value + 10 years.\nIf value is the interval [start, end], defaults to end + 10 years.", "default": "value"}, {"name": "key", "type_name": "str", "is_optional": false, "description": "An optional string to use as the unique key for the widget.\nIf this is omitted, a key will be generated for the widget\nbased on its content. Multiple widgets of the same type may\nnot share the same key.", "default": null}, {"name": "help", "type_name": "str", "is_optional": false, "description": "An optional tooltip that gets displayed next to the input.", "default": null}, {"name": "on_change", "type_name": "callable", "is_optional": false, "description": "An optional callback invoked when this date_input's value changes.", "default": null}, {"name": "args", "type_name": "tuple", "is_optional": false, "description": "An optional tuple of args to pass to the callback.", "default": null}, {"name": "kwargs", "type_name": "dict", "is_optional": false, "description": "An optional dict of kwargs to pass to the callback.", "default": null}]}, "streamlit.echo": {"name": "echo", "signature": "streamlit.echo(code_location='above')", "description": null, "args": [{"name": "code_location", "type_name": "\"above\" or \"below\"", "is_optional": false, "description": "Whether to show the echoed code before or after the results of the\nexecuted code block.", "default": null}]}, "streamlit.empty": {"name": "empty", "signature": "streamlit.empty()", "description": "Inserts a container into your app that can be used to hold a single element.\nThis allows you to, for example, remove elements at any point, or replace\nseveral elements at once (using a child multi-element container).\n\nTo insert/replace/clear an element on the returned container, you can\nuse \"with\" notation or just call methods directly on the returned object.\nSee examples below.", "args": []}, "streamlit.error": {"name": "error", "signature": "streamlit.error(body)", "description": null, "args": [{"name": "body", "type_name": "str", "is_optional": false, "description": "The error text to display.", "default": null}]}, "streamlit.exception": {"name": "exception", "signature": "streamlit.exception(exception)", "description": null, "args": [{"name": "exception", "type_name": "Exception", "is_optional": false, "description": "The exception to display.", "default": null}]}, "streamlit.experimental_get_query_params": {"name": "experimental_get_query_params", "signature": "streamlit.experimental_get_query_params()", "description": null, "args": []}, "streamlit.experimental_rerun": {"name": "experimental_rerun", "signature": "streamlit.experimental_rerun()", "description": "When `st.experimental_rerun()` is called, the script is halted - no\nmore statements will be run, and the script will be queued to re-run\nfrom the top.\n\nIf this function is called outside of Streamlit, it will raise an\nException.", "args": []}, "streamlit.experimental_set_query_params": {"name": "experimental_set_query_params", "signature": "streamlit.experimental_set_query_params(**query_params)", "description": null, "args": [{"name": "**query_params", "type_name": "dict", "is_optional": false, "description": "The query parameters to set, as key-value pairs.", "default": null}]}, "streamlit.experimental_show": {"name": "experimental_show", "signature": "streamlit.experimental_show(*args)", "description": "Show() has similar properties to write():\n\n    1. You can pass in multiple arguments, all of which will be debugged.\n    2. It returns None, so it's \"slot\" in the app cannot be reused.\n\nNote: This is an experimental feature. See\nhttps://docs.streamlit.io/en/latest/api.html#pre-release-features for more information.", "args": [{"name": "*args", "type_name": "any", "is_optional": false, "description": "One or many objects to debug in the App.", "default": null}]}, "streamlit.file_uploader": {"name": "file_uploader", "signature": "streamlit.file_uploader(label, type=None, accept_multiple_files=False, key=None, help=None, on_change=None, args=None, kwargs=None)", "description": "By default, uploaded files are limited to 200MB. You can configure\nthis using the `server.maxUploadSize` config option.", "args": [{"name": "label", "type_name": "str", "is_optional": false, "description": "A short label explaining to the user what this file uploader is for.", "default": null}, {"name": "type", "type_name": "str or list of str or None", "is_optional": false, "description": "Array of allowed extensions. ['png', 'jpg']\nThe default is None, which means all extensions are allowed.", "default": "None"}, {"name": "accept_multiple_files", "type_name": "bool", "is_optional": false, "description": "If True, allows the user to upload multiple files at the same time,\nin which case the return value will be a list of files.\nDefault: False", "default": "False"}, {"name": "key", "type_name": "str", "is_optional": false, "description": "An optional string to use as the unique key for the widget.\nIf this is omitted, a key will be generated for the widget\nbased on its content. Multiple widgets of the same type may\nnot share the same key.", "default": null}, {"name": "help", "type_name": "str", "is_optional": false, "description": "A tooltip that gets displayed next to the file uploader.", "default": null}, {"name": "on_change", "type_name": "callable", "is_optional": false, "description": "An optional callback invoked when this file_uploader's value\nchanges.", "default": null}, {"name": "args", "type_name": "tuple", "is_optional": false, "description": "An optional tuple of args to pass to the callback.", "default": null}, {"name": "kwargs", "type_name": "dict", "is_optional": false, "description": "An optional dict of kwargs to pass to the callback.", "default": null}]}, "streamlit.form": {"name": "form", "signature": "streamlit.form(key: str, clear_on_submit: bool = False)", "description": "A form is a container that visually groups other elements and\nwidgets together, and contains a Submit button. When the form's\nSubmit button is pressed, all widget values inside the form will be\nsent to Streamlit in a batch.\n\nTo add elements to a form object, you can use \"with\" notation\n(preferred) or just call methods directly on the form. See\nexamples below.\n\nForms have a few constraints:\n\n* Every form must contain a `st.form_submit_button`.\n* You cannot add a normal `st.button` to a form.\n* Forms can appear anywhere in your app (sidebar, columns, etc),\n  but they cannot be embedded inside other forms.\n\nFor more information about forms, check out our\n`blog post <https://blog.streamlit.io/introducing-submit-button-and-forms/>`_.", "args": [{"name": "key", "type_name": "str", "is_optional": false, "description": "A string that identifies the form. Each form must have its own\nkey. (This key is not displayed to the user in the interface.)", "default": null}, {"name": "clear_on_submit", "type_name": "bool", "is_optional": false, "description": "If True, all widgets inside the form will be reset to their default\nvalues after the user presses the Submit button. Defaults to False.\n(Note that Custom Components are unaffected by this flag, and\nwill not be reset to their defaults on form submission.)", "default": "values"}]}, "streamlit.form_submit_button": {"name": "form_submit_button", "signature": "streamlit.form_submit_button(label: str = 'Submit', help: Optional[str] = None, on_click=None, args=None, kwargs=None) -> bool", "description": "When this button is clicked, all widget values inside the form will be\nsent to Streamlit in a batch.\n\nEvery form must have a form_submit_button. A form_submit_button\ncannot exist outside a form.\n\nFor more information about forms, check out our\n`blog post <https://blog.streamlit.io/introducing-submit-button-and-forms/>`_.", "args": [{"name": "label", "type_name": "str", "is_optional": false, "description": "A short label explaining to the user what this button is for.\nDefaults to \"Submit\".", "default": "s"}, {"name": "help", "type_name": "str or None", "is_optional": false, "description": "A tooltip that gets displayed when the button is hovered over.\nDefaults to None.", "default": "None."}, {"name": "on_click", "type_name": "callable", "is_optional": false, "description": "An optional callback invoked when this button is clicked.", "default": null}, {"name": "args", "type_name": "tuple", "is_optional": false, "description": "An optional tuple of args to pass to the callback.", "default": null}, {"name": "kwargs", "type_name": "dict", "is_optional": false, "description": "An optional dict of kwargs to pass to the callback.", "default": null}]}, "streamlit.get_option": {"name": "get_option", "signature": "streamlit.get_option(key: str) -> Any", "description": "Run `streamlit config show` in the terminal to see all available options.", "args": [{"name": "key", "type_name": "str", "is_optional": false, "description": "The config option key of the form \"section.optionName\". To see all\navailable options, run `streamlit config show` on a terminal.", "default": null}]}, "streamlit.graphviz_chart": {"name": "graphviz_chart", "signature": "streamlit.graphviz_chart(figure_or_dot, use_container_width=False)", "description": null, "args": [{"name": "figure_or_dot", "type_name": "graphviz.dot.Graph, graphviz.dot.Digraph, str", "is_optional": false, "description": "The Graphlib graph object or dot string to display", "default": null}, {"name": "use_container_width", "type_name": "bool", "is_optional": false, "description": "If True, set the chart width to the column width. This takes\nprecedence over the figure's native `width` value.", "default": null}]}, "streamlit.header": {"name": "header", "signature": "streamlit.header(body, anchor=None)", "description": null, "args": [{"name": "body", "type_name": "str", "is_optional": false, "description": "The text to display.", "default": null}, {"name": "anchor", "type_name": "str", "is_optional": false, "description": "The anchor name of the header that can be accessed with #anchor\nin the URL. If omitted, it generates an anchor using the body.", "default": null}]}, "streamlit.help": {"name": "help", "signature": "streamlit.help(obj)", "description": "Displays the doc string for this object.", "args": [{"name": "obj", "type_name": "Object", "is_optional": false, "description": "The object whose docstring should be displayed.", "default": null}]}, "streamlit.image": {"name": "image", "signature": "streamlit.image(image, caption=None, width=None, use_column_width=None, clamp=False, channels='RGB', output_format='auto')", "description": null, "args": [{"name": "image", "type_name": "numpy.ndarray, [numpy.ndarray], BytesIO, str, or [str]", "is_optional": false, "description": "Monochrome image of shape (w,h) or (w,h,1)\nOR a color image of shape (w,h,3)\nOR an RGBA image of shape (w,h,4)\nOR a URL to fetch the image from\nOR a path of a local image file\nOR an SVG XML string like `<svg xmlns=...</svg>`\nOR a list of one of the above, to display multiple images.", "default": null}, {"name": "caption", "type_name": "str or list of str", "is_optional": false, "description": "Image caption. If displaying multiple images, caption should be a\nlist of captions (one for each image).", "default": null}, {"name": "width", "type_name": "int or None", "is_optional": false, "description": "Image width. None means use the image width,\nbut do not exceed the width of the column.\nShould be set for SVG images, as they have no default image width.", "default": "image"}, {"name": "use_column_width", "type_name": "'auto' or 'always' or 'never' or bool", "is_optional": false, "description": "If 'auto', set the image's width to its natural size,\nbut do not exceed the width of the column.\nIf 'always' or True, set the image's width to the column width.\nIf 'never' or False, set the image's width to its natural size.\nNote: if set, `use_column_width` takes precedence over the `width` parameter.", "default": null}, {"name": "clamp", "type_name": "bool", "is_optional": false, "description": "Clamp image pixel values to a valid range ([0-255] per channel).\nThis is only meaningful for byte array images; the parameter is\nignored for image URLs. If this is not set, and an image has an\nout-of-range value, an error will be thrown.", "default": null}, {"name": "channels", "type_name": "'RGB' or 'BGR'", "is_optional": false, "description": "If image is an nd.array, this parameter denotes the format used to\nrepresent color information. Defaults to 'RGB', meaning\n`image[:, :, 0]` is the red channel, `image[:, :, 1]` is green, and\n`image[:, :, 2]` is blue. For images coming from libraries like\nOpenCV you should set this to 'BGR', instead.", "default": "s"}, {"name": "output_format", "type_name": "'JPEG', 'PNG', or 'auto'", "is_optional": false, "description": "This parameter specifies the format to use when transferring the\nimage data. Photos should use the JPEG format for lossy compression\nwhile diagrams should use the PNG format for lossless compression.\nDefaults to 'auto' which identifies the compression type based\non the type and format of the image argument.", "default": "s"}]}, "streamlit.info": {"name": "info", "signature": "streamlit.info(body)", "description": null, "args": [{"name": "body", "type_name": "str", "is_optional": false, "description": "The info text to display.", "default": null}]}, "streamlit.json": {"name": "json", "signature": "streamlit.json(body)", "description": null, "args": [{"name": "body", "type_name": "Object or str", "is_optional": false, "description": "The object to print as JSON. All referenced objects should be\nserializable to JSON as well. If object is a string, we assume it\ncontains serialized JSON.", "default": null}]}, "streamlit.latex": {"name": "latex", "signature": "streamlit.latex(body)", "description": "Supported LaTeX functions are listed at\nhttps://katex.org/docs/supported.html.", "args": [{"name": "body", "type_name": "str or SymPy expression", "is_optional": false, "description": "The string or SymPy expression to display as LaTeX. If str, it's\na good idea to use raw Python strings since LaTeX uses backslashes\na lot.", "default": null}]}, "streamlit.line_chart": {"name": "line_chart", "signature": "streamlit.line_chart(data=None, width=0, height=0, use_container_width=True)", "description": "This is syntax-sugar around st.altair_chart. The main difference\nis this command uses the data's own column and indices to figure out\nthe chart's spec. As a result this is easier to use for many \"just plot\nthis\" scenarios, while being less customizable.\n\nIf st.line_chart does not guess the data specification\ncorrectly, try specifying your desired chart using st.altair_chart.", "args": [{"name": "data", "type_name": "pandas.DataFrame, pandas.Styler, numpy.ndarray, Iterable, dict", "is_optional": false, "description": "or None\nData to be plotted.", "default": null}, {"name": "width", "type_name": "int", "is_optional": false, "description": "The chart width in pixels. If 0, selects the width automatically.", "default": null}, {"name": "height", "type_name": "int", "is_optional": false, "description": "The chart width in pixels. If 0, selects the height automatically.", "default": null}, {"name": "use_container_width", "type_name": "bool", "is_optional": false, "description": "If True, set the chart width to the column width. This takes\nprecedence over the width argument.", "default": null}]}, "streamlit.map": {"name": "map", "signature": "streamlit.map(data=None, zoom=None, use_container_width=True)", "description": "This is a wrapper around st.pydeck_chart to quickly create scatterplot\ncharts on top of a map, with auto-centering and auto-zoom.\n\nWhen using this command, we advise all users to use a personal Mapbox\ntoken. This ensures the map tiles used in this chart are more\nrobust. You can do this with the mapbox.token config option.\n\nTo get a token for yourself, create an account at\nhttps://mapbox.com. It's free! (for moderate usage levels) See\nhttps://docs.streamlit.io/en/latest/cli.html#view-all-config-options for more\ninfo on how to set config options.", "args": [{"name": "data", "type_name": "pandas.DataFrame, pandas.Styler, numpy.ndarray, Iterable, dict,", "is_optional": false, "description": "or None\nThe data to be plotted. Must have columns called 'lat', 'lon',\n'latitude', or 'longitude'.", "default": null}, {"name": "zoom", "type_name": "int", "is_optional": false, "description": "Zoom level as specified in\nhttps://wiki.openstreetmap.org/wiki/Zoom_levels", "default": null}]}, "streamlit.markdown": {"name": "markdown", "signature": "streamlit.markdown(body, unsafe_allow_html=False)", "description": null, "args": [{"name": "body", "type_name": "str", "is_optional": false, "description": "The string to display as Github-flavored Markdown. Syntax\ninformation can be found at: https://github.github.com/gfm.\n\nThis also supports:\n\n* Emoji shortcodes, such as `:+1:`  and `:sunglasses:`.\n  For a list of all supported codes,\n  see https://raw.githubusercontent.com/omnidan/node-emoji/master/lib/emoji.json.\n\n* LaTeX expressions, by wrapping them in \"$\" or \"$$\" (the \"$$\"\n  must be on their own lines). Supported LaTeX functions are listed\n  at https://katex.org/docs/supported.html.", "default": null}, {"name": "unsafe_allow_html", "type_name": "bool", "is_optional": false, "description": "By default, any HTML tags found in the body will be escaped and\ntherefore treated as pure text. This behavior may be turned off by\nsetting this argument to True.\n\nThat said, we *strongly advise against it*. It is hard to write\nsecure HTML, so by using this argument you may be compromising your\nusers' security. For more information, see:\n\nhttps://github.com/streamlit/streamlit/issues/152\n\n*Also note that `unsafe_allow_html` is a temporary measure and may\nbe removed from Streamlit at any time.*\n\nIf you decide to turn on HTML anyway, we ask you to please tell us\nyour exact use case here:\n\nhttps://discuss.streamlit.io/t/96\n\nThis will help us come up with safe APIs that allow you to do what\nyou want.", "default": null}]}, "streamlit.multiselect": {"name": "multiselect", "signature": "streamlit.multiselect(label, options, default=None, format_func=<class 'str'>, key=None, help=None, on_change=None, args=None, kwargs=None)", "description": "The multiselect widget starts as empty.", "args": [{"name": "label", "type_name": "str", "is_optional": false, "description": "A short label explaining to the user what this select widget is for.", "default": null}, {"name": "options", "type_name": "list, tuple, numpy.ndarray, pandas.Series, or pandas.DataFrame", "is_optional": false, "description": "Labels for the select options. This will be cast to str internally\nby default. For pandas.DataFrame, the first column is selected.", "default": "."}, {"name": "default", "type_name": "[str] or None", "is_optional": false, "description": "List of default values.", "default": "values."}, {"name": "format_func", "type_name": "function", "is_optional": false, "description": "Function to modify the display of selectbox options. It receives\nthe raw option as an argument and should output the label to be\nshown for that option. This has no impact on the return value of\nthe selectbox.", "default": null}, {"name": "key", "type_name": "str", "is_optional": false, "description": "An optional string to use as the unique key for the widget.\nIf this is omitted, a key will be generated for the widget\nbased on its content. Multiple widgets of the same type may\nnot share the same key.", "default": null}, {"name": "help", "type_name": "str", "is_optional": false, "description": "An optional tooltip that gets displayed next to the multiselect.", "default": null}, {"name": "on_change", "type_name": "callable", "is_optional": false, "description": "An optional callback invoked when this multiselect's value changes.", "default": null}, {"name": "args", "type_name": "tuple", "is_optional": false, "description": "An optional tuple of args to pass to the callback.", "default": null}, {"name": "kwargs", "type_name": "dict", "is_optional": false, "description": "An optional dict of kwargs to pass to the callback.", "default": null}]}, "streamlit.number_input": {"name": "number_input", "signature": "streamlit.number_input(label, min_value=None, max_value=None, value=<streamlit.state.widgets.NoValue object at 0x7f3ab44e2cd0>, step=None, format=None, key=None, help=None, on_change=None, args=None, kwargs=None)", "description": null, "args": [{"name": "label", "type_name": "str", "is_optional": false, "description": "A short label explaining to the user what this input is for.", "default": null}, {"name": "min_value", "type_name": "int or float or None", "is_optional": false, "description": "The minimum permitted value.\nIf None, there will be no minimum.", "default": null}, {"name": "max_value", "type_name": "int or float or None", "is_optional": false, "description": "The maximum permitted value.\nIf None, there will be no maximum.", "default": null}, {"name": "value", "type_name": "int or float or None", "is_optional": false, "description": "The value of this widget when it first renders.\nDefaults to min_value, or 0.0 if min_value is None", "default": "min_value"}, {"name": "step", "type_name": "int or float or None", "is_optional": false, "description": "The stepping interval.\nDefaults to 1 if the value is an int, 0.01 otherwise.\nIf the value is not specified, the format parameter will be used.", "default": "1"}, {"name": "format", "type_name": "str or None", "is_optional": false, "description": "A printf-style format string controlling how the interface should\ndisplay numbers. Output must be purely numeric. This does not impact\nthe return value. Valid formatters: %d %e %f %g %i %u", "default": null}, {"name": "key", "type_name": "str", "is_optional": false, "description": "An optional string to use as the unique key for the widget.\nIf this is omitted, a key will be generated for the widget\nbased on its content. Multiple widgets of the same type may\nnot share the same key.", "default": null}, {"name": "help", "type_name": "str", "is_optional": false, "description": "An optional tooltip that gets displayed next to the input.", "default": null}, {"name": "on_change", "type_name": "callable", "is_optional": false, "description": "An optional callback invoked when this number_input's value changes.", "default": null}, {"name": "args", "type_name": "tuple", "is_optional": false, "description": "An optional tuple of args to pass to the callback.", "default": null}, {"name": "kwargs", "type_name": "dict", "is_optional": false, "description": "An optional dict of kwargs to pass to the callback.", "default": null}]}, "streamlit.object_beta_warning": {"name": "object_beta_warning", "signature": "streamlit.object_beta_warning(obj, obj_name, date)", "description": "Wrapped objects will run as normal, but then proceed to show an st.warning\nsaying that the beta_ version will be removed in ~3 months.", "args": [{"name": "obj", "type_name": "Any", "is_optional": false, "description": "The `st.` object that used to be in beta.", "default": null}, {"name": "obj_name", "type_name": "str", "is_optional": false, "description": "The name of the object within __init__.py", "default": null}, {"name": "date", "type_name": "str", "is_optional": false, "description": "A date like \"2020-01-01\", indicating the last day we'll guarantee\nsupport for the beta_ prefix.", "default": null}]}, "streamlit.plotly_chart": {"name": "plotly_chart", "signature": "streamlit.plotly_chart(figure_or_data, use_container_width=False, sharing='streamlit', **kwargs)", "description": "Plotly is a charting library for Python. The arguments to this function\nclosely follow the ones for Plotly's `plot()` function. You can find\nmore about Plotly at https://plot.ly/python.", "args": [{"name": "figure_or_data", "type_name": "plotly.graph_objs.Figure, plotly.graph_objs.Data,", "is_optional": false, "description": "dict/list of plotly.graph_objs.Figure/Data\n\nSee https://plot.ly/python/ for examples of graph descriptions.", "default": null}, {"name": "use_container_width", "type_name": "bool", "is_optional": false, "description": "If True, set the chart width to the column width. This takes\nprecedence over the figure's native `width` value.", "default": null}, {"name": "sharing", "type_name": "{'streamlit', 'private', 'secret', 'public'}", "is_optional": false, "description": "Use 'streamlit' to insert the plot and all its dependencies\ndirectly in the Streamlit app using plotly's offline mode (default).\nUse any other sharing mode to send the chart to Plotly chart studio, which\nrequires an account. See https://plotly.com/chart-studio/ for more information.", "default": null}, {"name": "**kwargs", "type_name": null, "is_optional": null, "description": "Any argument accepted by Plotly's `plot()` function.", "default": null}, {"name": "To show Plotly charts in Streamlit, call `st.plotly_chart`", "type_name": null, "is_optional": null, "description": null, "default": null}, {"name": "wherever you would call Plotly's `py.plot` or `py.iplot`.", "type_name": null, "is_optional": null, "description": null, "default": null}]}, "streamlit.progress": {"name": "progress", "signature": "streamlit.progress(value)", "description": null, "args": [{"name": "value", "type_name": "int or float", "is_optional": false, "description": "0 <= value <= 100 for int\n\n0.0 <= value <= 1.0 for float", "default": null}]}, "streamlit.pydeck_chart": {"name": "pydeck_chart", "signature": "streamlit.pydeck_chart(pydeck_obj=None, use_container_width=False)", "description": "This supports 3D maps, point clouds, and more! More info about PyDeck\nat https://deckgl.readthedocs.io/en/latest/.\n\nThese docs are also quite useful:\n\n- DeckGL docs: https://github.com/uber/deck.gl/tree/master/docs\n- DeckGL JSON docs: https://github.com/uber/deck.gl/tree/master/modules/json\n\nWhen using this command, we advise all users to use a personal Mapbox\ntoken. This ensures the map tiles used in this chart are more\nrobust. You can do this with the mapbox.token config option.\n\nTo get a token for yourself, create an account at\nhttps://mapbox.com. It's free! (for moderate usage levels) See\nhttps://docs.streamlit.io/en/latest/cli.html#view-all-config-options for more\ninfo on how to set config options.", "args": [{"name": "spec", "type_name": "pydeck.Deck or None", "is_optional": false, "description": "Object specifying the PyDeck chart to draw.", "default": null}]}, "streamlit.pyplot": {"name": "pyplot", "signature": "streamlit.pyplot(fig=None, clear_figure=None, **kwargs)", "description": null, "args": [{"name": "fig", "type_name": "Matplotlib Figure", "is_optional": false, "description": "The figure to plot. When this argument isn't specified, this\nfunction will render the global figure (but this is deprecated,\nas described below)", "default": null}, {"name": "clear_figure", "type_name": "bool", "is_optional": false, "description": "If True, the figure will be cleared after being rendered.\nIf False, the figure will not be cleared after being rendered.\nIf left unspecified, we pick a default based on the value of `fig`.\n\n* If `fig` is set, defaults to `False`.\n\n* If `fig` is not set, defaults to `True`. This simulates Jupyter's\n  approach to matplotlib rendering.", "default": "based"}, {"name": "**kwargs", "type_name": "any", "is_optional": false, "description": "Arguments to pass to Matplotlib's savefig function.", "default": null}]}, "streamlit.radio": {"name": "radio", "signature": "streamlit.radio(label, options, index=0, format_func=<class 'str'>, key=None, help=None, on_change=None, args=None, kwargs=None)", "description": null, "args": [{"name": "label", "type_name": "str", "is_optional": false, "description": "A short label explaining to the user what this radio group is for.", "default": null}, {"name": "options", "type_name": "list, tuple, numpy.ndarray, pandas.Series, or pandas.DataFrame", "is_optional": false, "description": "Labels for the radio options. This will be cast to str internally\nby default. For pandas.DataFrame, the first column is selected.", "default": "."}, {"name": "index", "type_name": "int", "is_optional": false, "description": "The index of the preselected option on first render.", "default": null}, {"name": "format_func", "type_name": "function", "is_optional": false, "description": "Function to modify the display of radio options. It receives\nthe raw option as an argument and should output the label to be\nshown for that option. This has no impact on the return value of\nthe radio.", "default": null}, {"name": "key", "type_name": "str", "is_optional": false, "description": "An optional string to use as the unique key for the widget.\nIf this is omitted, a key will be generated for the widget\nbased on its content. Multiple widgets of the same type may\nnot share the same key.", "default": null}, {"name": "help", "type_name": "str", "is_optional": false, "description": "An optional tooltip that gets displayed next to the radio.", "default": null}, {"name": "on_change", "type_name": "callable", "is_optional": false, "description": "An optional callback invoked when this radio's value changes.", "default": null}, {"name": "args", "type_name": "tuple", "is_optional": false, "description": "An optional tuple of args to pass to the callback.", "default": null}, {"name": "kwargs", "type_name": "dict", "is_optional": false, "description": "An optional dict of kwargs to pass to the callback.", "default": null}]}, "streamlit.select_slider": {"name": "select_slider", "signature": "streamlit.select_slider(label, options=[], value=None, format_func=<class 'str'>, key=None, help=None, on_change=None, args=None, kwargs=None)", "description": "This also allows you to render a range slider by passing a two-element\ntuple or list as the `value`.\n\nThe difference between `st.select_slider` and `st.slider` is that\n`select_slider` accepts any datatype and takes an iterable set of\noptions, while `slider` only accepts numerical or date/time data and\ntakes a range as input.", "args": [{"name": "label", "type_name": "str", "is_optional": false, "description": "A short label explaining to the user what this slider is for.", "default": null}, {"name": "options", "type_name": "list, tuple, numpy.ndarray, pandas.Series, or pandas.DataFrame", "is_optional": false, "description": "Labels for the slider options. All options will be cast to str\ninternally by default. For pandas.DataFrame, the first column is\nselected.", "default": "."}, {"name": "value", "type_name": "a supported type or a tuple/list of supported types or None", "is_optional": false, "description": "The value of the slider when it first renders. If a tuple/list\nof two values is passed here, then a range slider with those lower\nand upper bounds is rendered. For example, if set to `(1, 10)` the\nslider will have a selectable range between 1 and 10.\nDefaults to first option.", "default": "first"}, {"name": "format_func", "type_name": "function", "is_optional": false, "description": "Function to modify the display of the labels from the options.\nargument. It receives the option as an argument and its output\nwill be cast to str.", "default": null}, {"name": "key", "type_name": "str", "is_optional": false, "description": "An optional string to use as the unique key for the widget.\nIf this is omitted, a key will be generated for the widget\nbased on its content. Multiple widgets of the same type may\nnot share the same key.", "default": null}, {"name": "help", "type_name": "str", "is_optional": false, "description": "An optional tooltip that gets displayed next to the select slider.", "default": null}, {"name": "on_change", "type_name": "callable", "is_optional": false, "description": "An optional callback invoked when this select_slider's value changes.", "default": null}, {"name": "args", "type_name": "tuple", "is_optional": false, "description": "An optional tuple of args to pass to the callback.", "default": null}, {"name": "kwargs", "type_name": "dict", "is_optional": false, "description": "An optional dict of kwargs to pass to the callback.", "default": null}]}, "streamlit.selectbox": {"name": "selectbox", "signature": "streamlit.selectbox(label, options, index=0, format_func=<class 'str'>, key=None, help=None, on_change=None, args=None, kwargs=None)", "description": null, "args": [{"name": "label", "type_name": "str", "is_optional": false, "description": "A short label explaining to the user what this select widget is for.", "default": null}, {"name": "options", "type_name": "list, tuple, numpy.ndarray, pandas.Series, or pandas.DataFrame", "is_optional": false, "description": "Labels for the select options. This will be cast to str internally\nby default. For pandas.DataFrame, the first column is selected.", "default": "."}, {"name": "index", "type_name": "int", "is_optional": false, "description": "The index of the preselected option on first render.", "default": null}, {"name": "format_func", "type_name": "function", "is_optional": false, "description": "Function to modify the display of the labels. It receives the option\nas an argument and its output will be cast to str.", "default": null}, {"name": "key", "type_name": "str", "is_optional": false, "description": "An optional string to use as the unique key for the widget.\nIf this is omitted, a key will be generated for the widget\nbased on its content. Multiple widgets of the same type may\nnot share the same key.", "default": null}, {"name": "help", "type_name": "str", "is_optional": false, "description": "An optional tooltip that gets displayed next to the selectbox.", "default": null}, {"name": "on_change", "type_name": "callable", "is_optional": false, "description": "An optional callback invoked when this selectbox's value changes.", "default": null}, {"name": "args", "type_name": "tuple", "is_optional": false, "description": "An optional tuple of args to pass to the callback.", "default": null}, {"name": "kwargs", "type_name": "dict", "is_optional": false, "description": "An optional dict of kwargs to pass to the callback.", "default": null}]}, "streamlit.set_option": {"name": "set_option", "signature": "streamlit.set_option(key, value)", "description": "Currently, only the following config options can be set within the script itself:\n    * client.caching\n    * client.displayEnabled\n    * deprecation.*\n\nCalling with any other options will raise StreamlitAPIException.\n\nRun `streamlit config show` in the terminal to see all available options.", "args": [{"name": "key", "type_name": "str", "is_optional": false, "description": "The config option key of the form \"section.optionName\". To see all\navailable options, run `streamlit config show` on a terminal.", "default": null}, {"name": "value", "type_name": null, "is_optional": null, "description": "The new value to assign to this config option.", "default": null}]}, "streamlit.set_page_config": {"name": "set_page_config", "signature": "streamlit.set_page_config(page_title=None, page_icon=None, layout='centered', initial_sidebar_state='auto')", "description": ".. note::\n    This must be the first Streamlit command used in your app, and must only\n    be set once.", "args": [{"name": "page_title", "type_name": "str or None", "is_optional": false, "description": "The page title, shown in the browser tab. If None, defaults to the\nfilename of the script (\"app.py\" would show \"app \u2022 Streamlit\").", "default": "the"}, {"name": "page_icon", "type_name": "Anything supported by st.image or str or None", "is_optional": false, "description": "The page favicon.\nBesides the types supported by `st.image` (like URLs or numpy arrays),\nyou can pass in an emoji as a string (\"\ud83e\udd88\") or a shortcode (\":shark:\").\nIf you're feeling lucky, try \"random\" for a random emoji!\nEmoji icons are courtesy of Twemoji and loaded from MaxCDN.", "default": null}, {"name": "layout", "type_name": "\"centered\" or \"wide\"", "is_optional": false, "description": "How the page content should be laid out. Defaults to \"centered\",\nwhich constrains the elements into a centered column of fixed width;\n\"wide\" uses the entire screen.", "default": "s"}, {"name": "initial_sidebar_state", "type_name": "\"auto\" or \"expanded\" or \"collapsed\"", "is_optional": false, "description": "How the sidebar should start out. Defaults to \"auto\",\nwhich hides the sidebar on mobile-sized devices, and shows it otherwise.\n\"expanded\" shows the sidebar initially; \"collapsed\" hides it.", "default": "s"}]}, "streamlit.slider": {"name": "slider", "signature": "streamlit.slider(label, min_value=None, max_value=None, value=None, step=None, format=None, key=None, help=None, on_change=None, args=None, kwargs=None)", "description": "This supports int, float, date, time, and datetime types.\n\nThis also allows you to render a range slider by passing a two-element\ntuple or list as the `value`.\n\nThe difference between `st.slider` and `st.select_slider` is that\n`slider` only accepts numerical or date/time data and takes a range as\ninput, while `select_slider` accepts any datatype and takes an iterable\nset of options.", "args": [{"name": "label", "type_name": "str", "is_optional": false, "description": "A short label explaining to the user what this slider is for.", "default": null}, {"name": "min_value", "type_name": "a supported type or None", "is_optional": false, "description": "The minimum permitted value.\nDefaults to 0 if the value is an int, 0.0 if a float,\nvalue - timedelta(days=14) if a date/datetime, time.min if a time", "default": "0"}, {"name": "max_value", "type_name": "a supported type or None", "is_optional": false, "description": "The maximum permitted value.\nDefaults to 100 if the value is an int, 1.0 if a float,\nvalue + timedelta(days=14) if a date/datetime, time.max if a time", "default": "100"}, {"name": "value", "type_name": "a supported type or a tuple/list of supported types or None", "is_optional": false, "description": "The value of the slider when it first renders. If a tuple/list\nof two values is passed here, then a range slider with those lower\nand upper bounds is rendered. For example, if set to `(1, 10)` the\nslider will have a selectable range between 1 and 10.\nDefaults to min_value.", "default": "min_value."}, {"name": "step", "type_name": "int/float/timedelta or None", "is_optional": false, "description": "The stepping interval.\nDefaults to 1 if the value is an int, 0.01 if a float,\ntimedelta(days=1) if a date/datetime, timedelta(minutes=15) if a time\n(or if max_value - min_value < 1 day)", "default": "1"}, {"name": "format", "type_name": "str or None", "is_optional": false, "description": "A printf-style format string controlling how the interface should\ndisplay numbers. This does not impact the return value.\nFormatter for int/float supports: %d %e %f %g %i\nFormatter for date/time/datetime uses Moment.js notation:\nhttps://momentjs.com/docs/#/displaying/format/", "default": null}, {"name": "key", "type_name": "str", "is_optional": false, "description": "An optional string to use as the unique key for the widget.\nIf this is omitted, a key will be generated for the widget\nbased on its content. Multiple widgets of the same type may\nnot share the same key.", "default": null}, {"name": "help", "type_name": "str", "is_optional": false, "description": "An optional tooltip that gets displayed next to the slider.", "default": null}, {"name": "on_change", "type_name": "callable", "is_optional": false, "description": "An optional callback invoked when this slider's value changes.", "default": null}, {"name": "args", "type_name": "tuple", "is_optional": false, "description": "An optional tuple of args to pass to the callback.", "default": null}, {"name": "kwargs", "type_name": "dict", "is_optional": false, "description": "An optional dict of kwargs to pass to the callback.", "default": null}]}, "streamlit.spinner": {"name": "spinner", "signature": "streamlit.spinner(text='In progress...')", "description": null, "args": [{"name": "text", "type_name": "str", "is_optional": false, "description": "A message to display while executing that block", "default": null}]}, "streamlit.stop": {"name": "stop", "signature": "streamlit.stop()", "description": "Streamlit will not run any statements after `st.stop()`.\nWe recommend rendering a message to explain why the script has stopped.\nWhen run outside of Streamlit, this will raise an Exception.", "args": []}, "streamlit.subheader": {"name": "subheader", "signature": "streamlit.subheader(body, anchor=None)", "description": null, "args": [{"name": "body", "type_name": "str", "is_optional": false, "description": "The text to display.", "default": null}, {"name": "anchor", "type_name": "str", "is_optional": false, "description": "The anchor name of the header that can be accessed with #anchor\nin the URL. If omitted, it generates an anchor using the body.", "default": null}]}, "streamlit.success": {"name": "success", "signature": "streamlit.success(body)", "description": null, "args": [{"name": "body", "type_name": "str", "is_optional": false, "description": "The success text to display.", "default": null}]}, "streamlit.table": {"name": "table", "signature": "streamlit.table(data=None)", "description": "This differs from `st.dataframe` in that the table in this case is\nstatic: its entire contents are laid out directly on the page.", "args": [{"name": "data", "type_name": "pandas.DataFrame, pandas.Styler, numpy.ndarray, Iterable, dict,", "is_optional": false, "description": "or None\nThe table data.", "default": null}]}, "streamlit.text": {"name": "text", "signature": "streamlit.text(body)", "description": null, "args": [{"name": "body", "type_name": "str", "is_optional": false, "description": "The string to display.", "default": null}]}, "streamlit.text_area": {"name": "text_area", "signature": "streamlit.text_area(label, value='', height=None, max_chars=None, key=None, help=None, on_change=None, args=None, kwargs=None)", "description": null, "args": [{"name": "label", "type_name": "str", "is_optional": false, "description": "A short label explaining to the user what this input is for.", "default": null}, {"name": "value", "type_name": "any", "is_optional": false, "description": "The text value of this widget when it first renders. This will be\ncast to str internally.", "default": null}, {"name": "height", "type_name": "int or None", "is_optional": false, "description": "Desired height of the UI element expressed in pixels. If None, a\ndefault height is used.", "default": "height"}, {"name": "max_chars", "type_name": "int or None", "is_optional": false, "description": "Maximum number of characters allowed in text area.", "default": null}, {"name": "key", "type_name": "str", "is_optional": false, "description": "An optional string to use as the unique key for the widget.\nIf this is omitted, a key will be generated for the widget\nbased on its content. Multiple widgets of the same type may\nnot share the same key.", "default": null}, {"name": "help", "type_name": "str", "is_optional": false, "description": "An optional tooltip that gets displayed next to the textarea.", "default": null}, {"name": "on_change", "type_name": "callable", "is_optional": false, "description": "An optional callback invoked when this text_area's value changes.", "default": null}, {"name": "args", "type_name": "tuple", "is_optional": false, "description": "An optional tuple of args to pass to the callback.", "default": null}, {"name": "kwargs", "type_name": "dict", "is_optional": false, "description": "An optional dict of kwargs to pass to the callback.", "default": null}]}, "streamlit.text_input": {"name": "text_input", "signature": "streamlit.text_input(label, value='', max_chars=None, key=None, type='default', help=None, autocomplete=None, on_change=None, args=None, kwargs=None)", "description": null, "args": [{"name": "label", "type_name": "str", "is_optional": false, "description": "A short label explaining to the user what this input is for.", "default": null}, {"name": "value", "type_name": "any", "is_optional": false, "description": "The text value of this widget when it first renders. This will be\ncast to str internally.", "default": null}, {"name": "max_chars", "type_name": "int or None", "is_optional": false, "description": "Max number of characters allowed in text input.", "default": null}, {"name": "key", "type_name": "str", "is_optional": false, "description": "An optional string to use as the unique key for the widget.\nIf this is omitted, a key will be generated for the widget\nbased on its content. Multiple widgets of the same type may\nnot share the same key.", "default": null}, {"name": "type", "type_name": "str", "is_optional": false, "description": "The type of the text input. This can be either \"default\" (for\na regular text input), or \"password\" (for a text input that\nmasks the user's typed value). Defaults to \"default\".", "default": "s"}, {"name": "help", "type_name": "str", "is_optional": false, "description": "An optional tooltip that gets displayed next to the input.", "default": null}, {"name": "autocomplete", "type_name": "str", "is_optional": false, "description": "An optional value that will be passed to the <input> element's\nautocomplete property. If unspecified, this value will be set to\n\"new-password\" for \"password\" inputs, and the empty string for\n\"default\" inputs. For more details, see https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete", "default": null}, {"name": "on_change", "type_name": "callable", "is_optional": false, "description": "An optional callback invoked when this text_input's value changes.", "default": null}, {"name": "args", "type_name": "tuple", "is_optional": false, "description": "An optional tuple of args to pass to the callback.", "default": null}, {"name": "kwargs", "type_name": "dict", "is_optional": false, "description": "An optional dict of kwargs to pass to the callback.", "default": null}]}, "streamlit.time_input": {"name": "time_input", "signature": "streamlit.time_input(label, value=None, key=None, help=None, on_change=None, args=None, kwargs=None)", "description": null, "args": [{"name": "label", "type_name": "str", "is_optional": false, "description": "A short label explaining to the user what this time input is for.", "default": null}, {"name": "value", "type_name": "datetime.time/datetime.datetime", "is_optional": false, "description": "The value of this widget when it first renders. This will be\ncast to str internally. Defaults to the current time.", "default": "the"}, {"name": "key", "type_name": "str", "is_optional": false, "description": "An optional string to use as the unique key for the widget.\nIf this is omitted, a key will be generated for the widget\nbased on its content. Multiple widgets of the same type may\nnot share the same key.", "default": null}, {"name": "help", "type_name": "str", "is_optional": false, "description": "An optional tooltip that gets displayed next to the input.", "default": null}, {"name": "on_change", "type_name": "callable", "is_optional": false, "description": "An optional callback invoked when this time_input's value changes.", "default": null}, {"name": "args", "type_name": "tuple", "is_optional": false, "description": "An optional tuple of args to pass to the callback.", "default": null}, {"name": "kwargs", "type_name": "dict", "is_optional": false, "description": "An optional dict of kwargs to pass to the callback.", "default": null}]}, "streamlit.title": {"name": "title", "signature": "streamlit.title(body, anchor=None)", "description": "Each document should have a single `st.title()`, although this is not\nenforced.", "args": [{"name": "body", "type_name": "str", "is_optional": false, "description": "The text to display.", "default": null}, {"name": "anchor", "type_name": "str", "is_optional": false, "description": "The anchor name of the header that can be accessed with #anchor\nin the URL. If omitted, it generates an anchor using the body.", "default": null}]}, "streamlit.vega_lite_chart": {"name": "vega_lite_chart", "signature": "streamlit.vega_lite_chart(data=None, spec=None, use_container_width=False, **kwargs)", "description": null, "args": [{"name": "data", "type_name": "pandas.DataFrame, pandas.Styler, numpy.ndarray, Iterable, dict,", "is_optional": false, "description": "or None\nEither the data to be plotted or a Vega-Lite spec containing the\ndata (which more closely follows the Vega-Lite API).", "default": null}, {"name": "spec", "type_name": "dict or None", "is_optional": false, "description": "The Vega-Lite spec for the chart. If the spec was already passed in\nthe previous argument, this must be set to None. See\nhttps://vega.github.io/vega-lite/docs/ for more info.", "default": null}, {"name": "use_container_width", "type_name": "bool", "is_optional": false, "description": "If True, set the chart width to the column width. This takes\nprecedence over Vega-Lite's native `width` value.", "default": null}, {"name": "**kwargs", "type_name": "any", "is_optional": false, "description": "Same as spec, but as keywords.", "default": null}]}, "streamlit.video": {"name": "video", "signature": "streamlit.video(data, format='video/mp4', start_time=0)", "description": null, "args": [{"name": "data", "type_name": "str, bytes, BytesIO, numpy.ndarray, or file opened with", "is_optional": false, "description": "io.open().\nRaw video data, filename, or URL pointing to a video to load.\nIncludes support for YouTube URLs.\nNumpy arrays and raw data formats must include all necessary file\nheaders to match specified file format.", "default": null}, {"name": "format", "type_name": "str", "is_optional": false, "description": "The mime type for the video file. Defaults to 'video/mp4'.\nSee https://tools.ietf.org/html/rfc4281 for more info.", "default": "s"}, {"name": "start_time", "type_name": "int", "is_optional": false, "description": "The time from which this element should start playing.", "default": null}]}, "streamlit.warning": {"name": "warning", "signature": "streamlit.warning(body)", "description": null, "args": [{"name": "body", "type_name": "str", "is_optional": false, "description": "The warning text to display.", "default": null}]}, "streamlit.write": {"name": "write", "signature": "streamlit.write(*args, **kwargs)", "description": "This is the Swiss Army knife of Streamlit commands: it does different\nthings depending on what you throw at it. Unlike other Streamlit commands,\nwrite() has some unique properties:\n\n1. You can pass in multiple arguments, all of which will be written.\n2. Its behavior depends on the input types as follows.\n3. It returns None, so its \"slot\" in the App cannot be reused.", "args": [{"name": "*args", "type_name": "any", "is_optional": false, "description": "One or many objects to print to the App.\n\nArguments are handled as follows:\n\n- write(string)     : Prints the formatted Markdown string, with\n    support for LaTeX expression and emoji shortcodes.\n    See docs for st.markdown for more.\n- write(data_frame) : Displays the DataFrame as a table.\n- write(error)      : Prints an exception specially.\n- write(func)       : Displays information about a function.\n- write(module)     : Displays information about the module.\n- write(dict)       : Displays dict in an interactive widget.\n- write(mpl_fig)    : Displays a Matplotlib figure.\n- write(altair)     : Displays an Altair chart.\n- write(keras)      : Displays a Keras model.\n- write(graphviz)   : Displays a Graphviz graph.\n- write(plotly_fig) : Displays a Plotly figure.\n- write(bokeh_fig)  : Displays a Bokeh figure.\n- write(sympy_expr) : Prints SymPy expression using LaTeX.\n- write(htmlable)   : Prints _repr_html_() for the object if available.\n- write(obj)        : Prints str(obj) if otherwise unknown.", "default": null}, {"name": "unsafe_allow_html", "type_name": "bool", "is_optional": false, "description": "This is a keyword-only argument that defaults to False.\n\nBy default, any HTML tags found in strings will be escaped and\ntherefore treated as pure text. This behavior may be turned off by\nsetting this argument to True.\n\nThat said, *we strongly advise against it*. It is hard to write secure\nHTML, so by using this argument you may be compromising your users'\nsecurity. For more information, see:\n\nhttps://github.com/streamlit/streamlit/issues/152\n\n**Also note that `unsafe_allow_html` is a temporary measure and may be\nremoved from Streamlit at any time.**\n\nIf you decide to turn on HTML anyway, we ask you to please tell us your\nexact use case here:\nhttps://discuss.streamlit.io/t/96 .\n\nThis will help us come up with safe APIs that allow you to do what you\nwant.", "default": "False."}]}}